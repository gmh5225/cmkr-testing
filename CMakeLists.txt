# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(cmkr-testing
	DESCRIPTION
		cmkr-testing
)

# Target hello_world
set(CMKR_TARGET hello_world)
set(hello_world_SOURCES "")

list(APPEND hello_world_SOURCES
	"src/main.cpp"
	"src/main.h"
)

list(APPEND hello_world_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${hello_world_SOURCES})
add_executable(hello_world)

if(hello_world_SOURCES)
	target_sources(hello_world PRIVATE ${hello_world_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT hello_world)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${hello_world_SOURCES})

target_compile_features(hello_world PRIVATE
	cxx_std_20
)

target_link_libraries(hello_world PRIVATE
	hello_world_static_lib
	hello_world_static_library
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target hello_world_static_lib
set(CMKR_TARGET hello_world_static_lib)
set(hello_world_static_lib_SOURCES "")

list(APPEND hello_world_static_lib_SOURCES
	"lib/hello_world_static_lib/hello_world_static_lib.cpp"
)

list(APPEND hello_world_static_lib_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${hello_world_static_lib_SOURCES})
add_library(hello_world_static_lib STATIC)

if(hello_world_static_lib_SOURCES)
	target_sources(hello_world_static_lib PRIVATE ${hello_world_static_lib_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${hello_world_static_lib_SOURCES})

target_compile_features(hello_world_static_lib PUBLIC
	cxx_std_20
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target hello_world_static_library
set(CMKR_TARGET hello_world_static_library)
set(hello_world_static_library_SOURCES "")

list(APPEND hello_world_static_library_SOURCES
	"lib/hello_world_static_library/hello_world_static_library.cpp"
)

list(APPEND hello_world_static_library_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${hello_world_static_library_SOURCES})
add_library(hello_world_static_library)

if(hello_world_static_library_SOURCES)
	target_sources(hello_world_static_library PRIVATE ${hello_world_static_library_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${hello_world_static_library_SOURCES})

target_compile_features(hello_world_static_library PUBLIC
	cxx_std_20
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target hello_world_static_shared
set(CMKR_TARGET hello_world_static_shared)
set(hello_world_static_shared_SOURCES "")

list(APPEND hello_world_static_shared_SOURCES
	"lib/hello_world_static_shared/hello_world_static_shared.cpp"
)

list(APPEND hello_world_static_shared_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${hello_world_static_shared_SOURCES})
add_library(hello_world_static_shared SHARED)

if(hello_world_static_shared_SOURCES)
	target_sources(hello_world_static_shared PRIVATE ${hello_world_static_shared_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${hello_world_static_shared_SOURCES})

target_compile_features(hello_world_static_shared PUBLIC
	cxx_std_20
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

